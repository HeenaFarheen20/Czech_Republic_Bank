USE WAREHOUSE COMPUTE_WH;

CREATE DATABASE CZECHBANK;

USE CZECHBANK;


CREATE OR REPLACE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;



CREATE OR REPLACE TABLE ACCOUNT(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(40),
Date DATE ,
Account_Type VARCHAR(100) ,
Card_Assigned VARCHAR(20),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE TABLE ORDER_LIST (
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE LOAN(
loan_id	INT ,
account_id	INT,
Date	DATE,
amount	INT,
duration	INT,
payments	INT,
status VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE TRANSACTIONS(
trans_id INT,	
account_id	INT,
Date	DATE,
Type	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
account_partner_id INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));


CREATE OR REPLACE TABLE CLIENT(
client_id	INT PRIMARY KEY,
Sex	CHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);


CREATE OR REPLACE TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
type CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);


CREATE OR REPLACE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
type CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
);"CZECHBANK"."PUBLIC"

---------------------------------------------------------------------------------------------

CREATE OR REPLACE STORAGE integration aws_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::873181389145:role/czechrepublicrole'
STORAGE_ALLOWED_LOCATIONS =('s3://czechrepublicdata/');

DESC integration aws_int;


CREATE OR REPLACE STAGE CZECHBANK
URL ='s3://czechrepublicdata'
--credentials=(aws_key_id='AKIAXQKR3H3PSG72XFMK'aws_secret_key='eKL6a6FjlQHic4s8Ne712Aelzg2ou4j6tNsVvFq5')
file_format = CZECH_BANK
storage_integration = aws_int;

LIST @CZECHBANK;

SHOW STAGES;

--CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE

--The AUTO_INGEST=true parameter specifies to read 
--- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.


CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."DISTRICT" --yourdatabase -- your schema ---your table
FROM '@CZECHBANK/District/' --s3 bucket subfolde4r name
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."ACCOUNT"
FROM '@CZECHBANK/Account/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TXNS AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."TRANSACTIONS"
FROM '@CZECHBANK/Txns/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANS AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."TRANSACTIONS"
FROM '@CZECHBANK/Trans/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISP AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."DISPOSITION"
FROM '@CZECHBANK/Disp/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."CARD"
FROM '@CZECHBANK/Card/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER_LIST AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."ORDER_LIST"
FROM '@CZECHBANK/Order/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."LOAN"
FROM '@CZECHBANK/Loan/'
FILE_FORMAT = CZECH_BANK;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "CZECHBANK"."PUBLIC"."CLIENT"
FROM '@CZECHBANK/Client/'
FILE_FORMAT = CZECH_BANK;

SHOW PIPES;

SELECT count(*) FROM DISTRICT;
SELECT count(*) FROM ACCOUNT;
SELECT count(*) FROM TRANSACTIONS;
SELECT count(*) FROM DISPOSITION;
SELECT count(*) FROM CARD;
SELECT count(*) FROM ORDER_LIST;
SELECT count(*) FROM LOAN;
SELECT count(*) FROM CLIENT;

ALTER PIPE BANK_SNOWPIPE_DISTRICT refresh;

ALTER PIPE BANK_SNOWPIPE_ACCOUNT refresh;

ALTER PIPE BANK_SNOWPIPE_TXNS refresh;

ALTER PIPE BANK_SNOWPIPE_TRANS refresh; -----1

ALTER PIPE BANK_SNOWPIPE_DISP refresh;

ALTER PIPE BANK_SNOWPIPE_CARD refresh;

ALTER PIPE BANK_SNOWPIPE_ORDER_LIST refresh;

ALTER PIPE BANK_SNOWPIPE_LOAN refresh;

ALTER PIPE BANK_SNOWPIPE_CLIENT refresh;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM DISTRICT;
SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTIONS;
SELECT * FROM DISPOSITION;
SELECT * FROM CARD;
SELECT * FROM ORDER_LIST;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;

---ADDING AGE COLUMN
ALTER TABLE CLIENT ADD COLUMN AGE INT;

UPDATE CLIENT 
SET AGE = DATEDIFF('YEAR', BIRTH_DATE,CAST('2022-12-31'AS DATE))
WHERE AGE IS NULL;
------

---UPDATING TRANSACTION TABLE
SELECT YEAR(DATE) AS TXNS_YEAR,COUNT(*) AS TOTAL FROM TRANSACTIONS
GROUP BY 1
ORDER BY 2 DESC;

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1, DATE)
WHERE YEAR(DATE) = 2021;

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1, DATE)
WHERE YEAR(DATE) = 2020;

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1, DATE)
WHERE YEAR(DATE) = 2019;

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1, DATE)
WHERE YEAR(DATE) = 2018;

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1, DATE)
WHERE YEAR(DATE) = 2017;

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1, DATE)
WHERE YEAR(DATE) = 2016;

SELECT MIN(DATE), MAX(DATE) FROM TRANSACTIONS;

SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(DATE) = 2017;

---UPDATING BANK COLUMN IN TRANSACTION TABLE
UPDATE TRANSACTIONS
SET BANK = 'SKY BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2022;

UPDATE TRANSACTIONS
SET BANK = 'DBS BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2021;

UPDATE TRANSACTIONS
SET BANK = 'NORTHERN BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2019;

UPDATE TRANSACTIONS
SET BANK = 'SOUTHERN BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2018;

UPDATE TRANSACTIONS
SET BANK = 'ADB BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2017;

SELECT * FROM TRANSACTIONS;
---------------

SELECT YEAR(ISSUED), COUNT(*) AS TOTAL  FROM CARD
GROUP BY 1
ORDER BY 2;

SELECT DISTINCT YEAR(ISSUED) FROM CARD;



----finding MalE & Female ratio

SELECT
SUM(CASE WHEN SEX = 'Male' THEN 1 END) AS MALE_CLIENT,
SUM(CASE WHEN SEX = 'Female' THEN 1 END) AS FEMALE_CLIENT
FROM CLIENT;

----finding male & female percentage

SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END)/COUNT(*)*100 AS MALE_PERC,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END)/COUNT(*)*100 AS FEMALE_PERC
FROM CLIENT;

--1. What is the demographic profile of the bank's clients and how does it vary across districts?

SELECT C.DISTRICT_ID,D.DISTRICT_NAME,
AVERAGE_SALARY,
ROUND(AVG(AGE)) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 END) AS MALE_CLIENT,
SUM(CASE WHEN SEX = 'Female' THEN 1 END) AS FEMALE_CLIENT,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100) AS MALE_FEMALE_RATIO_PERC,
COUNT(CLIENT_ID) AS CLIENT
FROM DISTRICT AS D INNER JOIN CLIENT AS C 
ON D.DISTRICT_CODE = C.DISTRICT_ID
group by 1,2,3
ORDER BY 1;

---2. How the banks have performed over the years. Give their detailed analysis year & month-wise.

SELECT LATEST_TXN_DATE, COUNT(*)AS TOTAL_TRANS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;

--3. What are the most common types of accounts and how do they differ in terms of usage and profitability?

CREATE OR REPLACE TABLE ACC_LATEST_TRANS_WITH_BALANCE 
AS
SELECT LTD.*,TRAN.BALANCE
FROM TRANSACTIONS AS TRAN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TRAN_YEAR,
   MONTH(DATE) AS TRAN_MONTH,
   MAX(DATE) AS LATEST_TRAN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TRAN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TRAN.DATE = LTD.LATEST_TRAN_DATE
WHERE TRAN.TYPE = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TRAN.ACCOUNT_ID,LTD.TRAN_YEAR,LTD.TRAN_MONTH;

SELECT * FROM ACC_LATEST_TRANS_WITH_BALANCE;

SELECT COUNT(DISTINCT ACCOUNT_ID) AS TOT_ACCOUNT FROM ACC_LATEST_TXNS_WITH_BALANCE;
SELECT COUNT(DISTINCT TRANS_ID) AS TOT_TXNS FROM TRANSACTIONS;
SELECT COUNT(CASE WHEN TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT FROM TRANSACTIONS;
SELECT COUNT(CASE WHEN TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT FROM TRANSACTIONS;
SELECT SUM(BALANCE) AS TOT_BALANCE FROM ACC_LATEST_TRANS_WITH_BALANCE;

--4. Which types of cards are most frequently used by the bank's clients and what is the overall profitability of the credit card business?
--5. What are the major expenses of the bank and how can they be reduced to improve profitability?
--6. What is the bankâ€™s loan portfolio and how does it vary across different purposes and client segments?
--7. How can the bank improve its customer service and satisfaction levels?
--8. Can the bank introduce new financial products or services to attract more customers and increase profitability?

CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT  ALWB.TRAN_YEAR , ALWB.TRAN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TRANS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,
SUM(ALWB.BALANCE) AS TOT_BALANCE,
ROUND((DEPOSIT_COUNT / TOT_TRANS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TRANS) * 100,2) AS WITHDRAWAL_PERC ,
ROUND(NVL(TOT_BALANCE / TOT_ACCOUNT,0),2)AS AVG_BALANCE,
ROUND(TOT_TRANS/TOT_ACCOUNT,0) AS TPA
FROM TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TRANS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;

SELECT * FROM BANKING_KPI;


